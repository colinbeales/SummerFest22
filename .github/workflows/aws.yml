# Sample workflow to access AWS resources when workflow is tied to branch
# The workflow Creates static website using aws s3
name: Build and push container to ECR
on:
  workflow_dispatch:
env:
  AWS_REGION : "eu-west-2"
  AWS_ECS_CLUSTER_NAME : "summerfest"
  AWS_ECS_SERVICE_NAME : "summerfest"
  CONTAINER_NAME: "summerfest"

# permission can be added at job level or workflow level    
permissions:
      id-token: write
      contents: read    # This is required for actions/checkout
jobs:
  buildAndDeployImage:
    name: Build and Deploy Container to ECR & ECS
    runs-on: ubuntu-latest
    
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ########## ROLE-TO-ASSUME ###########
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$CONTAINER_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$CONTAINER_NAME:$IMAGE_TAG
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: "./aws/task-definition.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ steps.login-ecr.outputs.registry }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true